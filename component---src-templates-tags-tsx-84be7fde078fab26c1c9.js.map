{"version":3,"sources":["webpack://gatsby-casper/./src/templates/tags.tsx"],"names":["pageContext","data","location","tag","edges","totalCount","allMarkdownRemark","tagData","allTagYaml","find","n","node","id","toLowerCase","lang","config","name","content","description","property","pathname","className","css","SiteHeader","SiteArchiveHeader","outer","SiteNavMain","inner","isHome","SiteHeaderBackground","backgroundImage","image","childImageSharp","fluid","src","SiteMain","PostFeed","map","key","fields","slug","post"],"mappings":"iOAmIA,UA5Ea,EAAGA,cAAaC,OAAMC,eAAkC,IAAD,QAClE,MAAMC,EAAMH,EAAYG,IAAMH,EAAYG,IAAM,IAC1C,MAAEC,EAAF,WAASC,GAAeJ,EAAKK,kBAC7BC,EAAUN,EAAKO,WAAWJ,MAAMK,MACpCC,GAAKA,EAAEC,KAAKC,GAAGC,gBAAkBV,EAAIU,gBAGvC,OACE,QAAC,IAAD,MACE,QAAC,IAAD,MACE,gBAAMC,KAAMC,YACZ,qBACGZ,EADH,MACWY,YAEX,gBAAMC,KAAK,cAAcC,QAASV,WAASI,KAAOJ,EAAQI,KAAKO,YAAc,MAC7E,gBAAMC,SAAS,eAAeF,QAASF,aACvC,gBAAMI,SAAS,UAAUF,QAAQ,aACjC,gBAAME,SAAS,WAAWF,QAAU,GAAEd,OAASY,eAC/C,gBAAMI,SAAS,SAASF,QAASF,YAAiBb,EAASkB,WAC1DL,eAAmB,gBAAMI,SAAS,oBAAoBF,QAASF,gBAChE,gBAAMC,KAAK,eAAeC,QAAQ,yBAClC,gBAAMD,KAAK,gBAAgBC,QAAU,GAAEd,OAASY,eAChD,gBAAMC,KAAK,cAAcC,QAASF,YAAiBb,EAASkB,WAC3DL,cACC,gBACEC,KAAK,eACLC,QAAU,IAAGF,kBAAqB,wBAAwB,SAIhE,QAAC,IAAD,MACE,kBACEM,UAAU,sBACVC,IAAG,CAAGC,KAAYC,KAAf,SAEH,eAAKF,IAAG,CAAGG,KAAOC,KAAV,SACN,eAAKJ,IAAKK,OACR,QAAC,IAAD,CAASC,QAAQ,OAGrB,QAAC,KAAD,CACEN,IAAG,CAAGG,KAAOI,KAAV,OACHC,gBAAiBvB,SAAF,UAAEA,EAASI,YAAX,iBAAE,EAAeoB,aAAjB,iBAAE,EAAsBC,uBAAxB,iBAAE,EAAuCC,aAAzC,aAAE,EAA8CC,IAC/Db,UAAU,2BAEV,QAAC,KAAD,CAAmBC,IAAKK,KAAON,UAAU,wBACvC,QAAC,KAAD,CAAWA,UAAU,cAAclB,IACnC,QAAC,KAAD,CAAiBkB,UAAU,oBACxBd,WAASI,KAAKO,YACbX,EAAQI,KAAKO,aAEb,2CACmBb,EAAa,GAAM,GAAEA,UACtB,IAAfA,GAAoB,SACL,IAAfA,GAAoB,iBAOjC,gBAAMO,GAAG,YAAYU,IAAG,CAAGa,KAAUV,KAAb,SACtB,eAAKH,IAAKK,OACR,eAAKL,IAAG,CAAGc,KAAH,QACLhC,EAAMiC,KAAI,EAAG1B,WACZ,QAAC,KAAD,CAAU2B,IAAK3B,EAAK4B,OAAOC,KAAMC,KAAM9B,UAK/C,QAAC,IAAD","file":"component---src-templates-tags-tsx-84be7fde078fab26c1c9.js","sourcesContent":["import { graphql } from 'gatsby';\r\nimport React from 'react';\r\nimport { FluidObject } from 'gatsby-image';\r\n\r\nimport { Footer } from '../components/Footer';\r\nimport SiteNav from '../components/header/SiteNav';\r\nimport { PostCard } from '../components/PostCard';\r\nimport { Wrapper } from '../components/Wrapper';\r\nimport IndexLayout from '../layouts';\r\nimport {\r\n  inner,\r\n  outer,\r\n  PostFeed,\r\n  SiteDescription,\r\n  SiteHeader,\r\n  SiteHeaderContent,\r\n  SiteMain,\r\n  SiteTitle,\r\n  SiteNavMain,\r\n  SiteArchiveHeader,\r\n  ResponsiveHeaderBackground,\r\n  SiteHeaderBackground,\r\n} from '../styles/shared';\r\nimport { PageContext } from './post';\r\nimport { Helmet } from 'react-helmet';\r\nimport config from '../website-config';\r\n\r\ninterface TagTemplateProps {\r\n  location: Location;\r\n  pageContext: {\r\n    tag: string;\r\n  };\r\n  data: {\r\n    allTagYaml: {\r\n      edges: Array<{\r\n        node: {\r\n          id: string;\r\n          description: string;\r\n          image?: {\r\n            childImageSharp: {\r\n              fluid: FluidObject;\r\n            };\r\n          };\r\n        };\r\n      }>;\r\n    };\r\n    allMarkdownRemark: {\r\n      totalCount: number;\r\n      edges: Array<{\r\n        node: PageContext;\r\n      }>;\r\n    };\r\n  };\r\n}\r\n\r\nconst Tags = ({ pageContext, data, location }: TagTemplateProps) => {\r\n  const tag = pageContext.tag ? pageContext.tag : '';\r\n  const { edges, totalCount } = data.allMarkdownRemark;\r\n  const tagData = data.allTagYaml.edges.find(\r\n    n => n.node.id.toLowerCase() === tag.toLowerCase(),\r\n  );\r\n\r\n  return (\r\n    <IndexLayout>\r\n      <Helmet>\r\n        <html lang={config.lang} />\r\n        <title>\r\n          {tag} - {config.title}\r\n        </title>\r\n        <meta name=\"description\" content={tagData?.node ? tagData.node.description : ''} />\r\n        <meta property=\"og:site_name\" content={config.title} />\r\n        <meta property=\"og:type\" content=\"website\" />\r\n        <meta property=\"og:title\" content={`${tag} - ${config.title}`} />\r\n        <meta property=\"og:url\" content={config.siteUrl + location.pathname} />\r\n        {config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\r\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n        <meta name=\"twitter:title\" content={`${tag} - ${config.title}`} />\r\n        <meta name=\"twitter:url\" content={config.siteUrl + location.pathname} />\r\n        {config.twitter && (\r\n          <meta\r\n            name=\"twitter:site\"\r\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\r\n          />\r\n        )}\r\n      </Helmet>\r\n      <Wrapper>\r\n        <header\r\n          className=\"site-archive-header\"\r\n          css={[SiteHeader, SiteArchiveHeader]}\r\n        >\r\n          <div css={[outer, SiteNavMain]}>\r\n            <div css={inner}>\r\n              <SiteNav isHome={false} />\r\n            </div>\r\n          </div>\r\n          <ResponsiveHeaderBackground\r\n            css={[outer, SiteHeaderBackground]}\r\n            backgroundImage={tagData?.node?.image?.childImageSharp?.fluid?.src}\r\n            className=\"site-header-background\"\r\n          >\r\n            <SiteHeaderContent css={inner} className=\"site-header-content\">\r\n              <SiteTitle className=\"site-title\">{tag}</SiteTitle>\r\n              <SiteDescription className=\"site-description\">\r\n                {tagData?.node.description ? (\r\n                  tagData.node.description\r\n                ) : (\r\n                  <>\r\n                    A collection of {totalCount > 1 && `${totalCount} posts`}\r\n                    {totalCount === 1 && '1 post'}\r\n                    {totalCount === 0 && 'No posts'}\r\n                  </>\r\n                )}\r\n              </SiteDescription>\r\n            </SiteHeaderContent>\r\n          </ResponsiveHeaderBackground>\r\n        </header>\r\n        <main id=\"site-main\" css={[SiteMain, outer]}>\r\n          <div css={inner}>\r\n            <div css={[PostFeed]}>\r\n              {edges.map(({ node }) => (\r\n                <PostCard key={node.fields.slug} post={node} />\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </main>\r\n        <Footer />\r\n      </Wrapper>\r\n    </IndexLayout>\r\n  );\r\n};\r\n\r\nexport default Tags;\r\n\r\nexport const pageQuery = graphql`\r\n  query($tag: String) {\r\n    allTagYaml {\r\n      edges {\r\n        node {\r\n          id\r\n          description\r\n          image {\r\n            childImageSharp {\r\n              fluid(maxWidth: 3720) {\r\n                ...GatsbyImageSharpFluid\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    allMarkdownRemark(\r\n      limit: 2000\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: { frontmatter: { tags: { in: [$tag] }, draft: { ne: true } } }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          excerpt\r\n          frontmatter {\r\n            title\r\n            excerpt\r\n            tags\r\n            date\r\n            image {\r\n              childImageSharp {\r\n                fluid(maxWidth: 1240) {\r\n                  ...GatsbyImageSharpFluid\r\n                }\r\n              }\r\n            }\r\n            author {\r\n              id\r\n              bio\r\n              avatar {\r\n                children {\r\n                  ... on ImageSharp {\r\n                    fluid(quality: 100, srcSetBreakpoints: [40, 80, 120]) {\r\n                      ...GatsbyImageSharpFluid\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          fields {\r\n            readingTime {\r\n              text\r\n            }\r\n            layout\r\n            slug\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"sourceRoot":""}